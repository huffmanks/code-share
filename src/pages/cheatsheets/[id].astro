---
import { Code } from "@astrojs/starlight/components";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { getCollection } from "astro:content";

import { borderColorVariants, colorVariants } from "@/lib/constants";
import { generateHeadMeta } from "@/lib/generateHeadMeta";
import { getVariant } from "@/lib/utils";

export async function getStaticPaths() {
  const cheatsheets = await getCollection("cheatsheets");

  return cheatsheets.map((cheatsheet) => ({
    params: { id: cheatsheet.id },
    props: { cheatsheet },
  }));
}

const { cheatsheet } = Astro.props;
const pageUrl = Astro.url.href;
---

<StarlightPage
  frontmatter={{
    title: cheatsheet.data.title,
    head: generateHeadMeta({ pageTitle: `${cheatsheet.data.title} Cheatsheet`, pageDescription: cheatsheet.data.description, pageUrl }),
    tableOfContents: false,
    prev: false,
    next: false,
  }}>
  <p style="margin-top: -20px; margin-bottom: 25px;">{cheatsheet.data.description}</p>
  {
    cheatsheet.data.groups.map((group) => (
      <div>
        <h2>{group.title}</h2>
        <p class="group-description">{group.description}</p>

        {group?.syntax && (
          <div class="no-copy" style="margin-bottom: 20px;">
            <Code lang="sh" preserveIndent code={group.syntax} />
          </div>
        )}

        {group?.items && (
          <div class="grid">
            {group.items.map((item, index) => (
              <div class="cheatsheet-card" style={{ borderColor: getVariant(borderColorVariants, index), color: getVariant(colorVariants, index) }}>
                <h3>{item.label}</h3>
                <p class="item-description">{item.description}</p>

                <div class="code-example">
                  {item?.example && (
                    <>
                      <code>{item.example}</code>
                    </>
                  )}
                  {item?.commands && (
                    <>
                      {item.commands.map((command) => (
                        <div class="command">
                          {command.steps.map((step, idx) => (
                            <>
                              <kbd class="kbd" style={{ borderColor: getVariant(borderColorVariants, index), boxShadow: `1px 1px 2px 0 ${getVariant(borderColorVariants, index)}` }}>
                                {step.key}
                              </kbd>
                              {idx + 1 !== command.steps.length && <>{command.isAlternative ? <span>or</span> : <span>+</span>}</>}
                            </>
                          ))}
                        </div>
                      ))}
                    </>
                  )}
                  {item?.code && (
                    <>
                      <Code lang={item.codeLang} wrap preserveIndent code={item.code} />
                    </>
                  )}
                  {item?.comment && (
                    <>
                      <div class="comment">{item.comment}</div>
                    </>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    ))
  }
</StarlightPage>

<style is:inline>
  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(400px, 100%), 1fr));
    gap: 10px;
    margin: 0 auto 30px;
  }

  h2 {
    margin-bottom: 5px;
  }

  .cheatsheet-card {
    padding: clamp(1rem, calc(0.125rem + 1.5vw), 2.5rem);
    border-radius: 0.5rem;
    border: 1px solid var(--sl-color-gray-5);
  }

  .group-description,
  .item-description {
    margin-bottom: 10px;
  }

  .code-example {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .code-example code {
    width: fit-content;
  }

  .comment {
    margin-top: 10px;
    font-size: 0.8rem;
    font-family: monospace;
    line-height: normal;
    color: var(--sl-color-gray-3);
  }

  .command {
    display: flex;
    align-items: center;
    gap: 0.5ch;
  }

  .kbd {
    display: inline-block;
    padding: 3px 6px;
    background-color: var(--sl-color-bg-inline-code);
    border-width: 1px;
    border-style: outset;
    border-radius: 5px;
    font-family: monospace;
    text-align: center;
  }

  .no-copy .copy {
    display: none;
  }

  /* ==== Overrides ==== */

  .sl-container {
    --sl-content-width: 80rem;
  }

  .sl-markdown-content :not(a, strong, em, del, span, input, code, br) + :not(a, strong, em, del, span, input, code, br, :where(.not-content *)) {
    margin-top: 0;
  }
</style>
