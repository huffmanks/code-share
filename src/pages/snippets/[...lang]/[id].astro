---
import { Code, TabItem, Tabs } from "@astrojs/starlight/components";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { getCollection } from "astro:content";

import { LanguageIcon } from "@/components/preact-icons";
import { DownloadButton } from "@/components/snippet/download-button";
import { borderColorVariants, colorVariants } from "@/lib/constants";
import { formatRelativeTime } from "@/lib/formatRelativeTime";
import { generateHeadMeta } from "@/lib/generateHeadMeta";
import { getLanguagesInfo } from "@/lib/languages";
import { getVariant } from "@/lib/utils";

export async function getStaticPaths() {
  const snippets = await getCollection("snippets");

  return snippets.map((snippet) => ({
    params: { id: snippet.id },
    props: { snippet },
  }));
}

const { snippet } = Astro.props;
const pageUrl = Astro.url.href;

const languages = getLanguagesInfo(snippet.data.fragments);
const time = formatRelativeTime(snippet.data.updatedAt);
---

<StarlightPage
  frontmatter={{
    title: snippet.data.title,
    head: generateHeadMeta({ pageTitle: snippet.data.title, pageDescription: snippet.data.description, pageUrl, parentTitle: "Snippet" }),
    tableOfContents: false,
    prev: false,
    next: false,
  }}>
  <article class="snippet">
    <div class="languages">
      {
        languages.map((languageInfo) => {
          const LanguageIconComponent = LanguageIcon[languageInfo.extension];
          return (
            <div class="language">
              {LanguageIconComponent && <LanguageIconComponent style={{ color: languageInfo.color }} />}
              <span>{languageInfo.label}</span>
            </div>
          );
        })
      }
    </div>
    <div class="time">
      {time}
    </div>
    <div class="description">
      <p>{snippet.data.description}</p>
    </div>
    <div class="tags-container">
      {
        snippet.data.tags &&
          snippet.data.tags.map((tag: string, index: number) => (
            <div class="badge" style={{ border: `1px solid ${getVariant(borderColorVariants, index)}`, color: getVariant(colorVariants, index) }}>
              {tag}
            </div>
          ))
      }
    </div>
    <div class="action-buttons" style={{ marginBottom: snippet.data.fragments.length > 1 ? "0.5rem" : "1.25rem" }}>
      <DownloadButton client:load snippet={snippet} />
    </div>

    {
      snippet.data.fragments.length > 1 ? (
        <Tabs>
          {snippet.data.fragments.map((fragment) => (
            <TabItem label={fragment.label}>
              <Code
                class="fragment-code"
                code={fragment.code}
                wrap
                preserveIndent
                frame={fragment.language === "sh" ? "terminal" : "auto"}
                lang={fragment.language}
                title={`${fragment.filename}.${fragment.language}`}
              />
            </TabItem>
          ))}
        </Tabs>
      ) : (
        <>
          <Code
            class="fragment-code"
            code={snippet.data.fragments[0].code}
            wrap
            preserveIndent
            frame={snippet.data.fragments[0].language === "sh" ? "terminal" : "auto"}
            lang={snippet.data.fragments[0].language}
            title={`${snippet.data.fragments[0].filename}.${snippet.data.fragments[0].language}`}
          />
        </>
      )
    }
  </article>
</StarlightPage>

<style is:inline>
  .time {
    font-weight: bold;
    font-size: 0.9rem;
    margin-bottom: 10px;
  }

  .languages {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 5px;
  }

  .language {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    font-size: 0.9rem;
  }

  .description {
    margin-bottom: 20px;
    color: var(--sl-color-gray-3);
  }

  .tags-container {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
  }

  .action-buttons {
    display: flex;
    align-items: center;
    justify-content: flex-end;
  }

  .expressive-code .copy {
    inset-inline-end: 1rem;
  }

  .fragment-code figure.frame {
    border-radius: 0.25rem;
    overflow: hidden;
  }

  .fragment-code.expressive-code .frame.has-title span.title {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .fragment-code.expressive-code .frame.has-title.is-terminal span.title {
    width: 50%;
    text-align: center;
  }

  .fragment-code.expressive-code .frame.has-title:not(.is-terminal) span.title {
    width: 100%;
  }

  .fragment-code.expressive-code .frame.has-title:not(.is-terminal) span.title::after {
    border: var(--ec-frm-edActTabIndHt) solid var(--ec-frm-edActTabIndBtmCol);
  }

  .fragment-code.expressive-code .frame.has-title:not(.is-terminal) .header::before,
  .fragment-code.expressive-code .frame.has-title:not(.is-terminal) span.title {
    border: none;
  }

  /* ==== Overrides ==== */

  .sl-markdown-content :not(a, strong, em, del, span, input, code, br) + :not(a, strong, em, del, span, input, code, br, :where(.not-content *)) {
    margin-top: 0;
  }

  .content-panel {
    padding-bottom: 10px;
  }

  starlight-tabs ul[role="tablist"] a[role="tab"] {
    white-space: nowrap;
  }
</style>
