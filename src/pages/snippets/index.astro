---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { experimental_AstroContainer } from "astro/container";
import { getCollection } from "astro:content";

import SnippetContainer from "@/components/snippet";
import FragmentCode from "@/components/snippet/fragment-code.astro";
import { generateHeadMeta } from "@/lib/generateHeadMeta";
import type { Fragment } from "@/types";

const pageUrl = Astro.url.href;

const collection = await getCollection("snippets");

const container = await experimental_AstroContainer.create();

const snippets = await Promise.all(
  collection.map(async (snippet) => {
    const codeFragments = await Promise.all(
      snippet.data.fragments.map(async (fragment: Fragment) => {
        const codeHtml = await container.renderToString(FragmentCode, {
          props: { fragment },
        });

        return {
          ...fragment,
          codeHtml,
        };
      })
    );

    return { ...snippet, codeFragments };
  })
);
---

<StarlightPage
  frontmatter={{
    title: "Snippets",
    head: generateHeadMeta({ pageTitle: "Snippets", pageDescription: "A collection of useful code snippets for various programming languages and tasks.", pageUrl }),
    tableOfContents: false,
    prev: false,
    next: false,
    pagefind: false,
  }}>
  <SnippetContainer client:load snippets={snippets} />
</StarlightPage>

<style is:inline>
  /* ==== Overrides ==== */

  .sl-container {
    --sl-content-width: 84rem;
  }

  .sl-markdown-content :not(a, strong, em, del, span, input, code, br) + :not(a, strong, em, del, span, input, code, br, :where(.not-content *)) {
    margin-top: 0;
  }

  .sl-markdown-content h2:not(:where(.not-content *)) {
    font-size: 1.5rem;
  }

  @media (min-width: 50rem) {
    .header {
      --__toc-width: unset;
    }
  }

  .header :nth-child(2).sl-flex {
    display: block;
  }
</style>
